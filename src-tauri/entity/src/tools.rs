//! SeaORM Entity. Generated by sea-orm-codegen 0.3.2

use sea_orm::{entity::prelude::*, sqlx::types::chrono, ActiveValue::Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "tools")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    #[serde(skip_deserializing)]
    pub id: i32,

    pub serial_code: String,
    pub name: String,
    pub brand: Option<String>,
    pub accuracy: Option<String>,
    pub range: Option<String>,
    pub serial_number: Option<String>,
    pub property_code: Option<String>,
    pub quantity: Option<i32>,
    pub description: Option<String>,

    #[serde(default = "default_created_at")]
    pub created_at: DateTimeWithTimeZone,
    #[serde(default = "default_updated_at")]
    pub updated_at: DateTimeWithTimeZone,
}

fn default_created_at() -> DateTimeWithTimeZone {
    chrono::Utc::now().into()
}

fn default_updated_at() -> DateTimeWithTimeZone {
    chrono::Utc::now().into()
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl Default for Model {
    fn default() -> Self {
        Self {
            id: 0,
            serial_code: String::new(),
            name: String::new(),
            brand: None,
            accuracy: None,
            range: None,
            serial_number: None,
            property_code: None,
            quantity: None,
            description: None,
            created_at: default_created_at(),
            updated_at: default_updated_at(),
        }
    }
}

impl ActiveModel {
    pub fn new() -> Self {
        let now = chrono::Utc::now().into();
        Self {
            created_at: Set(now),
            updated_at: Set(now),
            ..ActiveModelTrait::default()
        }
    }

    pub fn touch(&mut self) {
        let now = chrono::Utc::now().into();
        self.updated_at = Set(now);
    }
}
